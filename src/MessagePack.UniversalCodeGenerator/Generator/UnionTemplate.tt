<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

namespace <#= Namespace #>
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

<# foreach(var info in unionSerializationInfos) { #>
    public sealed class <#= info.Name #>Formatter : global::MessagePack.Formatters.IMessagePackFormatter<<#= info.FullName #>>
    {
        readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        readonly Dictionary<int, int> keyToJumpMap;

        public <#= info.Name #>Formatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(<#= info.SubTypes.Length #>, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
<# for(var i = 0; i < info.SubTypes.Length; i++) { var item = info.SubTypes[i]; #>
                { typeof(<#= item.Type #>).TypeHandle, new KeyValuePair<int, int>(<#= item.Key #>, <#= i #>) },
<# } #>
            };
            this.keyToJumpMap = new Dictionary<int, int>(<#= info.SubTypes.Length #>)
            {
<# for(var i = 0; i < info.SubTypes.Length; i++) { var item = info.SubTypes[i]; #>
                { <#= item.Key #>, <#= i #> },
<# } #>
            };
        }

        public void Serialize(IBufferWriter<byte> writer, <#= info.FullName #> value, global::MessagePack.IFormatterResolver formatterResolver)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                MessagePackBinary.WriteFixedArrayHeaderUnsafe(writer, 2);
                MessagePackBinary.WriteInt32(writer, keyValuePair.Key);
                switch (keyValuePair.Value)
                {
<# for(var i = 0; i < info.SubTypes.Length; i++) { var item = info.SubTypes[i]; #>
                    case <#= i #>:
                        formatterResolver.GetFormatterWithVerify<<#= item.Type #>>().Serialize(writer, (<#= item.Type #>)value, formatterResolver);
                        break;
<# } #>
                    default:
                        break;
                }

                return;
            }

            MessagePackBinary.WriteNil(writer);
        }
        
        public <#= info.FullName #> Deserialize(ref ReadOnlySequence<byte> byteSequence, global::MessagePack.IFormatterResolver formatterResolver)
        {
            if (MessagePackBinary.IsNil(byteSequence))
            {
                byteSequence = byteSequence.Slice(1);
                return null;
            }

            if (MessagePackBinary.ReadArrayHeader(ref byteSequence) != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:<#= info.FullName #>");
            }

            var key = MessagePackBinary.ReadInt32(ref byteSequence);

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            <#= info.FullName #> result = null;
            switch (key)
            {
<# for(var i = 0; i < info.SubTypes.Length; i++) { var item = info.SubTypes[i]; #>
                case <#= i #>:
                    result = (<#= info.FullName #>)formatterResolver.GetFormatterWithVerify<<#= item.Type #>>().Deserialize(ref byteSequence, formatterResolver);
                    break;
<# } #>
                default:
                    MessagePackBinary.ReadNextBlock(ref byteSequence);
                    break;
            }
            
            return result;
        }
    }

<# } #>

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612